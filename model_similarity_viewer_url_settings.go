/*
Turnitin Core API

Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

API version: 1.0.249
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SimilarityViewerUrlSettings struct for SimilarityViewerUrlSettings
type SimilarityViewerUrlSettings struct {
	AuthorMetadataOverride *AuthorMetadataOverride `json:"author_metadata_override,omitempty"`
	// viewer's user ID
	ViewerUserId *string `json:"viewer_user_id,omitempty"`
	// two character locale language setting (e.g. 'en' or 'de') or full value
	Locale *string `json:"locale,omitempty"`
	// Default viewer permission set, accepts INSTRUCTOR, LEARNER, EDITOR, USER, APPLICANT, ADMINISTRATOR, UNDEFINED
	ViewerDefaultPermissionSet *string `json:"viewer_default_permission_set,omitempty"`
	ViewerPermissions *ViewerPermissions `json:"viewer_permissions,omitempty"`
	Eula *Eula `json:"eula,omitempty"`
	Sidebar *Sidebar `json:"sidebar,omitempty"`
	Similarity *SimilaritySettings `json:"similarity,omitempty"`
}

// NewSimilarityViewerUrlSettings instantiates a new SimilarityViewerUrlSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimilarityViewerUrlSettings() *SimilarityViewerUrlSettings {
	this := SimilarityViewerUrlSettings{}
	return &this
}

// NewSimilarityViewerUrlSettingsWithDefaults instantiates a new SimilarityViewerUrlSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimilarityViewerUrlSettingsWithDefaults() *SimilarityViewerUrlSettings {
	this := SimilarityViewerUrlSettings{}
	return &this
}

// GetAuthorMetadataOverride returns the AuthorMetadataOverride field value if set, zero value otherwise.
func (o *SimilarityViewerUrlSettings) GetAuthorMetadataOverride() AuthorMetadataOverride {
	if o == nil || o.AuthorMetadataOverride == nil {
		var ret AuthorMetadataOverride
		return ret
	}
	return *o.AuthorMetadataOverride
}

// GetAuthorMetadataOverrideOk returns a tuple with the AuthorMetadataOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimilarityViewerUrlSettings) GetAuthorMetadataOverrideOk() (*AuthorMetadataOverride, bool) {
	if o == nil || o.AuthorMetadataOverride == nil {
		return nil, false
	}
	return o.AuthorMetadataOverride, true
}

// HasAuthorMetadataOverride returns a boolean if a field has been set.
func (o *SimilarityViewerUrlSettings) HasAuthorMetadataOverride() bool {
	if o != nil && o.AuthorMetadataOverride != nil {
		return true
	}

	return false
}

// SetAuthorMetadataOverride gets a reference to the given AuthorMetadataOverride and assigns it to the AuthorMetadataOverride field.
func (o *SimilarityViewerUrlSettings) SetAuthorMetadataOverride(v AuthorMetadataOverride) {
	o.AuthorMetadataOverride = &v
}

// GetViewerUserId returns the ViewerUserId field value if set, zero value otherwise.
func (o *SimilarityViewerUrlSettings) GetViewerUserId() string {
	if o == nil || o.ViewerUserId == nil {
		var ret string
		return ret
	}
	return *o.ViewerUserId
}

// GetViewerUserIdOk returns a tuple with the ViewerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimilarityViewerUrlSettings) GetViewerUserIdOk() (*string, bool) {
	if o == nil || o.ViewerUserId == nil {
		return nil, false
	}
	return o.ViewerUserId, true
}

// HasViewerUserId returns a boolean if a field has been set.
func (o *SimilarityViewerUrlSettings) HasViewerUserId() bool {
	if o != nil && o.ViewerUserId != nil {
		return true
	}

	return false
}

// SetViewerUserId gets a reference to the given string and assigns it to the ViewerUserId field.
func (o *SimilarityViewerUrlSettings) SetViewerUserId(v string) {
	o.ViewerUserId = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *SimilarityViewerUrlSettings) GetLocale() string {
	if o == nil || o.Locale == nil {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimilarityViewerUrlSettings) GetLocaleOk() (*string, bool) {
	if o == nil || o.Locale == nil {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *SimilarityViewerUrlSettings) HasLocale() bool {
	if o != nil && o.Locale != nil {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *SimilarityViewerUrlSettings) SetLocale(v string) {
	o.Locale = &v
}

// GetViewerDefaultPermissionSet returns the ViewerDefaultPermissionSet field value if set, zero value otherwise.
func (o *SimilarityViewerUrlSettings) GetViewerDefaultPermissionSet() string {
	if o == nil || o.ViewerDefaultPermissionSet == nil {
		var ret string
		return ret
	}
	return *o.ViewerDefaultPermissionSet
}

// GetViewerDefaultPermissionSetOk returns a tuple with the ViewerDefaultPermissionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimilarityViewerUrlSettings) GetViewerDefaultPermissionSetOk() (*string, bool) {
	if o == nil || o.ViewerDefaultPermissionSet == nil {
		return nil, false
	}
	return o.ViewerDefaultPermissionSet, true
}

// HasViewerDefaultPermissionSet returns a boolean if a field has been set.
func (o *SimilarityViewerUrlSettings) HasViewerDefaultPermissionSet() bool {
	if o != nil && o.ViewerDefaultPermissionSet != nil {
		return true
	}

	return false
}

// SetViewerDefaultPermissionSet gets a reference to the given string and assigns it to the ViewerDefaultPermissionSet field.
func (o *SimilarityViewerUrlSettings) SetViewerDefaultPermissionSet(v string) {
	o.ViewerDefaultPermissionSet = &v
}

// GetViewerPermissions returns the ViewerPermissions field value if set, zero value otherwise.
func (o *SimilarityViewerUrlSettings) GetViewerPermissions() ViewerPermissions {
	if o == nil || o.ViewerPermissions == nil {
		var ret ViewerPermissions
		return ret
	}
	return *o.ViewerPermissions
}

// GetViewerPermissionsOk returns a tuple with the ViewerPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimilarityViewerUrlSettings) GetViewerPermissionsOk() (*ViewerPermissions, bool) {
	if o == nil || o.ViewerPermissions == nil {
		return nil, false
	}
	return o.ViewerPermissions, true
}

// HasViewerPermissions returns a boolean if a field has been set.
func (o *SimilarityViewerUrlSettings) HasViewerPermissions() bool {
	if o != nil && o.ViewerPermissions != nil {
		return true
	}

	return false
}

// SetViewerPermissions gets a reference to the given ViewerPermissions and assigns it to the ViewerPermissions field.
func (o *SimilarityViewerUrlSettings) SetViewerPermissions(v ViewerPermissions) {
	o.ViewerPermissions = &v
}

// GetEula returns the Eula field value if set, zero value otherwise.
func (o *SimilarityViewerUrlSettings) GetEula() Eula {
	if o == nil || o.Eula == nil {
		var ret Eula
		return ret
	}
	return *o.Eula
}

// GetEulaOk returns a tuple with the Eula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimilarityViewerUrlSettings) GetEulaOk() (*Eula, bool) {
	if o == nil || o.Eula == nil {
		return nil, false
	}
	return o.Eula, true
}

// HasEula returns a boolean if a field has been set.
func (o *SimilarityViewerUrlSettings) HasEula() bool {
	if o != nil && o.Eula != nil {
		return true
	}

	return false
}

// SetEula gets a reference to the given Eula and assigns it to the Eula field.
func (o *SimilarityViewerUrlSettings) SetEula(v Eula) {
	o.Eula = &v
}

// GetSidebar returns the Sidebar field value if set, zero value otherwise.
func (o *SimilarityViewerUrlSettings) GetSidebar() Sidebar {
	if o == nil || o.Sidebar == nil {
		var ret Sidebar
		return ret
	}
	return *o.Sidebar
}

// GetSidebarOk returns a tuple with the Sidebar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimilarityViewerUrlSettings) GetSidebarOk() (*Sidebar, bool) {
	if o == nil || o.Sidebar == nil {
		return nil, false
	}
	return o.Sidebar, true
}

// HasSidebar returns a boolean if a field has been set.
func (o *SimilarityViewerUrlSettings) HasSidebar() bool {
	if o != nil && o.Sidebar != nil {
		return true
	}

	return false
}

// SetSidebar gets a reference to the given Sidebar and assigns it to the Sidebar field.
func (o *SimilarityViewerUrlSettings) SetSidebar(v Sidebar) {
	o.Sidebar = &v
}

// GetSimilarity returns the Similarity field value if set, zero value otherwise.
func (o *SimilarityViewerUrlSettings) GetSimilarity() SimilaritySettings {
	if o == nil || o.Similarity == nil {
		var ret SimilaritySettings
		return ret
	}
	return *o.Similarity
}

// GetSimilarityOk returns a tuple with the Similarity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimilarityViewerUrlSettings) GetSimilarityOk() (*SimilaritySettings, bool) {
	if o == nil || o.Similarity == nil {
		return nil, false
	}
	return o.Similarity, true
}

// HasSimilarity returns a boolean if a field has been set.
func (o *SimilarityViewerUrlSettings) HasSimilarity() bool {
	if o != nil && o.Similarity != nil {
		return true
	}

	return false
}

// SetSimilarity gets a reference to the given SimilaritySettings and assigns it to the Similarity field.
func (o *SimilarityViewerUrlSettings) SetSimilarity(v SimilaritySettings) {
	o.Similarity = &v
}

func (o SimilarityViewerUrlSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthorMetadataOverride != nil {
		toSerialize["author_metadata_override"] = o.AuthorMetadataOverride
	}
	if o.ViewerUserId != nil {
		toSerialize["viewer_user_id"] = o.ViewerUserId
	}
	if o.Locale != nil {
		toSerialize["locale"] = o.Locale
	}
	if o.ViewerDefaultPermissionSet != nil {
		toSerialize["viewer_default_permission_set"] = o.ViewerDefaultPermissionSet
	}
	if o.ViewerPermissions != nil {
		toSerialize["viewer_permissions"] = o.ViewerPermissions
	}
	if o.Eula != nil {
		toSerialize["eula"] = o.Eula
	}
	if o.Sidebar != nil {
		toSerialize["sidebar"] = o.Sidebar
	}
	if o.Similarity != nil {
		toSerialize["similarity"] = o.Similarity
	}
	return json.Marshal(toSerialize)
}

type NullableSimilarityViewerUrlSettings struct {
	value *SimilarityViewerUrlSettings
	isSet bool
}

func (v NullableSimilarityViewerUrlSettings) Get() *SimilarityViewerUrlSettings {
	return v.value
}

func (v *NullableSimilarityViewerUrlSettings) Set(val *SimilarityViewerUrlSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSimilarityViewerUrlSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSimilarityViewerUrlSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimilarityViewerUrlSettings(val *SimilarityViewerUrlSettings) *NullableSimilarityViewerUrlSettings {
	return &NullableSimilarityViewerUrlSettings{value: val, isSet: true}
}

func (v NullableSimilarityViewerUrlSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimilarityViewerUrlSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


