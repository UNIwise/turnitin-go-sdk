/*
Turnitin Core API

Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

API version: 1.0.249
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// GroupsApiService GroupsApi service
type GroupsApiService service

type ApiAddGroupAttachmentRequest struct {
	ctx context.Context
	ApiService *GroupsApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	groupId string
	data *AddGroupAttachmentRequest
}

// a human readable string representing the type of integration being used
func (r ApiAddGroupAttachmentRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiAddGroupAttachmentRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiAddGroupAttachmentRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiAddGroupAttachmentRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiAddGroupAttachmentRequest) Data(data AddGroupAttachmentRequest) ApiAddGroupAttachmentRequest {
	r.data = &data
	return r
}

func (r ApiAddGroupAttachmentRequest) Execute() (*AddGroupAttachmentResponse, *http.Response, error) {
	return r.ApiService.AddGroupAttachmentExecute(r)
}

/*
AddGroupAttachment Add attachment to a group. will create a group if it does not exist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId group_id
 @return ApiAddGroupAttachmentRequest
*/
func (a *GroupsApiService) AddGroupAttachment(ctx context.Context, groupId string) ApiAddGroupAttachmentRequest {
	return ApiAddGroupAttachmentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return AddGroupAttachmentResponse
func (a *GroupsApiService) AddGroupAttachmentExecute(r ApiAddGroupAttachmentRequest) (*AddGroupAttachmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddGroupAttachmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsApiService.AddGroupAttachment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group_id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}
	if r.data == nil {
		return localVarReturnValue, nil, reportError("data is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	// body params
	localVarPostBody = r.data
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGroupAttachmentRequest struct {
	ctx context.Context
	ApiService *GroupsApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	groupId string
	attachId string
}

// a human readable string representing the type of integration being used
func (r ApiDeleteGroupAttachmentRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiDeleteGroupAttachmentRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiDeleteGroupAttachmentRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiDeleteGroupAttachmentRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiDeleteGroupAttachmentRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteGroupAttachmentExecute(r)
}

/*
DeleteGroupAttachment Hard delete group attachment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId group_id
 @param attachId The attachment ID (returned from a successful group attachment request) 
 @return ApiDeleteGroupAttachmentRequest
*/
func (a *GroupsApiService) DeleteGroupAttachment(ctx context.Context, groupId string, attachId string) ApiDeleteGroupAttachmentRequest {
	return ApiDeleteGroupAttachmentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		attachId: attachId,
	}
}

// Execute executes the request
func (a *GroupsApiService) DeleteGroupAttachmentExecute(r ApiDeleteGroupAttachmentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsApiService.DeleteGroupAttachment")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group_id}/attachments/{attach_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attach_id"+"}", url.PathEscape(parameterToString(r.attachId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetGroupRequest struct {
	ctx context.Context
	ApiService *GroupsApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	groupId string
}

// a human readable string representing the type of integration being used
func (r ApiGetGroupRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiGetGroupRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiGetGroupRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiGetGroupRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiGetGroupRequest) Execute() (*AggregateGroup, *http.Response, error) {
	return r.ApiService.GetGroupExecute(r)
}

/*
GetGroup Get group, group context and group context owners info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId group_id
 @return ApiGetGroupRequest
*/
func (a *GroupsApiService) GetGroup(ctx context.Context, groupId string) ApiGetGroupRequest {
	return ApiGetGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return AggregateGroup
func (a *GroupsApiService) GetGroupExecute(r ApiGetGroupRequest) (*AggregateGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AggregateGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsApiService.GetGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGroupAttachmentRequest struct {
	ctx context.Context
	ApiService *GroupsApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	groupId string
	attachId string
}

// a human readable string representing the type of integration being used
func (r ApiGetGroupAttachmentRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiGetGroupAttachmentRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiGetGroupAttachmentRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiGetGroupAttachmentRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiGetGroupAttachmentRequest) Execute() (*GroupAttachmentResponse, *http.Response, error) {
	return r.ApiService.GetGroupAttachmentExecute(r)
}

/*
GetGroupAttachment Get group attachment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId group_id
 @param attachId The attachment ID (returned from a successful group attachment request) 
 @return ApiGetGroupAttachmentRequest
*/
func (a *GroupsApiService) GetGroupAttachment(ctx context.Context, groupId string, attachId string) ApiGetGroupAttachmentRequest {
	return ApiGetGroupAttachmentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		attachId: attachId,
	}
}

// Execute executes the request
//  @return GroupAttachmentResponse
func (a *GroupsApiService) GetGroupAttachmentExecute(r ApiGetGroupAttachmentRequest) (*GroupAttachmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GroupAttachmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsApiService.GetGroupAttachment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group_id}/attachments/{attach_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attach_id"+"}", url.PathEscape(parameterToString(r.attachId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGroupAttachmentsRequest struct {
	ctx context.Context
	ApiService *GroupsApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	groupId string
}

// a human readable string representing the type of integration being used
func (r ApiGetGroupAttachmentsRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiGetGroupAttachmentsRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiGetGroupAttachmentsRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiGetGroupAttachmentsRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiGetGroupAttachmentsRequest) Execute() (*GetGroupAttachments200Response, *http.Response, error) {
	return r.ApiService.GetGroupAttachmentsExecute(r)
}

/*
GetGroupAttachments Get all attachments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId group_id
 @return ApiGetGroupAttachmentsRequest
*/
func (a *GroupsApiService) GetGroupAttachments(ctx context.Context, groupId string) ApiGetGroupAttachmentsRequest {
	return ApiGetGroupAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return GetGroupAttachments200Response
func (a *GroupsApiService) GetGroupAttachmentsExecute(r ApiGetGroupAttachmentsRequest) (*GetGroupAttachments200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetGroupAttachments200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsApiService.GetGroupAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group_id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsGroupIdPutRequest struct {
	ctx context.Context
	ApiService *GroupsApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	groupId string
	data *AggregateGroup
}

// a human readable string representing the type of integration being used
func (r ApiGroupsGroupIdPutRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiGroupsGroupIdPutRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiGroupsGroupIdPutRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiGroupsGroupIdPutRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiGroupsGroupIdPutRequest) Data(data AggregateGroup) ApiGroupsGroupIdPutRequest {
	r.data = &data
	return r
}

func (r ApiGroupsGroupIdPutRequest) Execute() (*AggregateGroup, *http.Response, error) {
	return r.ApiService.GroupsGroupIdPutExecute(r)
}

/*
GroupsGroupIdPut upsert group, group context and group context owners info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId group_id
 @return ApiGroupsGroupIdPutRequest
*/
func (a *GroupsApiService) GroupsGroupIdPut(ctx context.Context, groupId string) ApiGroupsGroupIdPutRequest {
	return ApiGroupsGroupIdPutRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return AggregateGroup
func (a *GroupsApiService) GroupsGroupIdPutExecute(r ApiGroupsGroupIdPutRequest) (*AggregateGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AggregateGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsApiService.GroupsGroupIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}
	if r.data == nil {
		return localVarReturnValue, nil, reportError("data is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	// body params
	localVarPostBody = r.data
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateGroupAttachmentRequest struct {
	ctx context.Context
	ApiService *GroupsApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	groupId string
	attachId string
	data *AddGroupAttachmentRequest
}

// a human readable string representing the type of integration being used
func (r ApiUpdateGroupAttachmentRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiUpdateGroupAttachmentRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiUpdateGroupAttachmentRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiUpdateGroupAttachmentRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiUpdateGroupAttachmentRequest) Data(data AddGroupAttachmentRequest) ApiUpdateGroupAttachmentRequest {
	r.data = &data
	return r
}

func (r ApiUpdateGroupAttachmentRequest) Execute() (*GroupAttachmentResponse, *http.Response, error) {
	return r.ApiService.UpdateGroupAttachmentExecute(r)
}

/*
UpdateGroupAttachment Patch a group attachment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId group_id
 @param attachId The attachment ID (returned from a successful group attachment request) 
 @return ApiUpdateGroupAttachmentRequest
*/
func (a *GroupsApiService) UpdateGroupAttachment(ctx context.Context, groupId string, attachId string) ApiUpdateGroupAttachmentRequest {
	return ApiUpdateGroupAttachmentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		attachId: attachId,
	}
}

// Execute executes the request
//  @return GroupAttachmentResponse
func (a *GroupsApiService) UpdateGroupAttachmentExecute(r ApiUpdateGroupAttachmentRequest) (*GroupAttachmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GroupAttachmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsApiService.UpdateGroupAttachment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group_id}/attachments/{attach_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attach_id"+"}", url.PathEscape(parameterToString(r.attachId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}
	if r.data == nil {
		return localVarReturnValue, nil, reportError("data is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	// body params
	localVarPostBody = r.data
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadGroupAttachmentRequest struct {
	ctx context.Context
	ApiService *GroupsApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	groupId string
	attachId string
	contentDisposition *string
	file *map[string]interface{}
}

// a human readable string representing the type of integration being used
func (r ApiUploadGroupAttachmentRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiUploadGroupAttachmentRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiUploadGroupAttachmentRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiUploadGroupAttachmentRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

// *must include the \&quot;filename\&quot; parameter, e.g. &#x60;inline; filename&#x3D;\&quot;MyFile.docx\&quot;&#x60; 
func (r ApiUploadGroupAttachmentRequest) ContentDisposition(contentDisposition string) ApiUploadGroupAttachmentRequest {
	r.contentDisposition = &contentDisposition
	return r
}

// the attachment file
func (r ApiUploadGroupAttachmentRequest) File(file map[string]interface{}) ApiUploadGroupAttachmentRequest {
	r.file = &file
	return r
}

func (r ApiUploadGroupAttachmentRequest) Execute() (*SuccessMessage, *http.Response, error) {
	return r.ApiService.UploadGroupAttachmentExecute(r)
}

/*
UploadGroupAttachment Upload Submitted File

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId The Group ID (required to already exist) 
 @param attachId The attachment ID (returned from a successful group attachment request) 
 @return ApiUploadGroupAttachmentRequest
*/
func (a *GroupsApiService) UploadGroupAttachment(ctx context.Context, groupId string, attachId string) ApiUploadGroupAttachmentRequest {
	return ApiUploadGroupAttachmentRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		attachId: attachId,
	}
}

// Execute executes the request
//  @return SuccessMessage
func (a *GroupsApiService) UploadGroupAttachmentExecute(r ApiUploadGroupAttachmentRequest) (*SuccessMessage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsApiService.UploadGroupAttachment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groups/{group_id}/attachments/{attach_id}/original"
	localVarPath = strings.Replace(localVarPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attach_id"+"}", url.PathEscape(parameterToString(r.attachId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}
	if r.contentDisposition == nil {
		return localVarReturnValue, nil, reportError("contentDisposition is required and must be specified")
	}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"binary/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	localVarHeaderParams["Content-Disposition"] = parameterToString(*r.contentDisposition, "")
	// body params
	localVarPostBody = r.file
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v SubmissionSizeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
