/*
Turnitin Core API

Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

API version: 1.0.249
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// SimilarityApiService SimilarityApi service
type SimilarityApiService service

type ApiDownloadSimilarityReportPdfRequest struct {
	ctx context.Context
	ApiService *SimilarityApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	id string
	pdfId string
}

// a human readable string representing the type of integration being used
func (r ApiDownloadSimilarityReportPdfRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiDownloadSimilarityReportPdfRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiDownloadSimilarityReportPdfRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiDownloadSimilarityReportPdfRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiDownloadSimilarityReportPdfRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.DownloadSimilarityReportPdfExecute(r)
}

/*
DownloadSimilarityReportPdf GET download pdf

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Submission ID (returned upon a successful POST to /submissions) 
 @param pdfId The Pdf ID (returned upon a successful POST to /submissions/{submission_id}/similarity/pdf) 
 @return ApiDownloadSimilarityReportPdfRequest
*/
func (a *SimilarityApiService) DownloadSimilarityReportPdf(ctx context.Context, id string, pdfId string) ApiDownloadSimilarityReportPdfRequest {
	return ApiDownloadSimilarityReportPdfRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		pdfId: pdfId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SimilarityApiService) DownloadSimilarityReportPdfExecute(r ApiDownloadSimilarityReportPdfRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SimilarityApiService.DownloadSimilarityReportPdf")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions/{id}/similarity/pdf/{pdf_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pdf_id"+"}", url.PathEscape(parameterToString(r.pdfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pdf", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSimilarityReportPdfStatusRequest struct {
	ctx context.Context
	ApiService *SimilarityApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	id string
	pdfId string
}

// a human readable string representing the type of integration being used
func (r ApiGetSimilarityReportPdfStatusRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiGetSimilarityReportPdfStatusRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiGetSimilarityReportPdfStatusRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiGetSimilarityReportPdfStatusRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiGetSimilarityReportPdfStatusRequest) Execute() (*PdfStatusResponse, *http.Response, error) {
	return r.ApiService.GetSimilarityReportPdfStatusExecute(r)
}

/*
GetSimilarityReportPdfStatus GET pdf download status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Submission ID (returned upon a successful POST to /submissions) 
 @param pdfId The Pdf ID (returned upon a successful POST to /submissions/{submission_id}/similarity/pdf) 
 @return ApiGetSimilarityReportPdfStatusRequest
*/
func (a *SimilarityApiService) GetSimilarityReportPdfStatus(ctx context.Context, id string, pdfId string) ApiGetSimilarityReportPdfStatusRequest {
	return ApiGetSimilarityReportPdfStatusRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		pdfId: pdfId,
	}
}

// Execute executes the request
//  @return PdfStatusResponse
func (a *SimilarityApiService) GetSimilarityReportPdfStatusExecute(r ApiGetSimilarityReportPdfStatusRequest) (*PdfStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PdfStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SimilarityApiService.GetSimilarityReportPdfStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions/{id}/similarity/pdf/{pdf_id}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pdf_id"+"}", url.PathEscape(parameterToString(r.pdfId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSimilarityReportResultsRequest struct {
	ctx context.Context
	ApiService *SimilarityApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	id string
}

// a human readable string representing the type of integration being used
func (r ApiGetSimilarityReportResultsRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiGetSimilarityReportResultsRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiGetSimilarityReportResultsRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiGetSimilarityReportResultsRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiGetSimilarityReportResultsRequest) Execute() (*SimilarityMetadata, *http.Response, error) {
	return r.ApiService.GetSimilarityReportResultsExecute(r)
}

/*
GetSimilarityReportResults Get Similarity Report Results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Submission ID (returned upon a successful POST to /submissions) 
 @return ApiGetSimilarityReportResultsRequest
*/
func (a *SimilarityApiService) GetSimilarityReportResults(ctx context.Context, id string) ApiGetSimilarityReportResultsRequest {
	return ApiGetSimilarityReportResultsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SimilarityMetadata
func (a *SimilarityApiService) GetSimilarityReportResultsExecute(r ApiGetSimilarityReportResultsRequest) (*SimilarityMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SimilarityMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SimilarityApiService.GetSimilarityReportResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions/{id}/similarity"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSimilarityReportUrlRequest struct {
	ctx context.Context
	ApiService *SimilarityApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	id string
	data *SimilarityViewerUrlSettings
}

// a human readable string representing the type of integration being used
func (r ApiGetSimilarityReportUrlRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiGetSimilarityReportUrlRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiGetSimilarityReportUrlRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiGetSimilarityReportUrlRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiGetSimilarityReportUrlRequest) Data(data SimilarityViewerUrlSettings) ApiGetSimilarityReportUrlRequest {
	r.data = &data
	return r
}

func (r ApiGetSimilarityReportUrlRequest) Execute() (*SimilarityViewerUrlResponse, *http.Response, error) {
	return r.ApiService.GetSimilarityReportUrlExecute(r)
}

/*
GetSimilarityReportUrl Returns a URL to access Cloud Viewer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Submission ID (returned upon a successful POST to /submissions) 
 @return ApiGetSimilarityReportUrlRequest
*/
func (a *SimilarityApiService) GetSimilarityReportUrl(ctx context.Context, id string) ApiGetSimilarityReportUrlRequest {
	return ApiGetSimilarityReportUrlRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SimilarityViewerUrlResponse
func (a *SimilarityApiService) GetSimilarityReportUrlExecute(r ApiGetSimilarityReportUrlRequest) (*SimilarityViewerUrlResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SimilarityViewerUrlResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SimilarityApiService.GetSimilarityReportUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions/{id}/viewer-url"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}
	if r.data == nil {
		return localVarReturnValue, nil, reportError("data is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	// body params
	localVarPostBody = r.data
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRequestSimilarityReportRequest struct {
	ctx context.Context
	ApiService *SimilarityApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	id string
	data *SimilarityPutRequest
}

// a human readable string representing the type of integration being used
func (r ApiRequestSimilarityReportRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiRequestSimilarityReportRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiRequestSimilarityReportRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiRequestSimilarityReportRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiRequestSimilarityReportRequest) Data(data SimilarityPutRequest) ApiRequestSimilarityReportRequest {
	r.data = &data
	return r
}

func (r ApiRequestSimilarityReportRequest) Execute() (*SuccessMessage, *http.Response, error) {
	return r.ApiService.RequestSimilarityReportExecute(r)
}

/*
RequestSimilarityReport Request Similarity Report generation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Submission ID (returned upon a successful POST to /submissions) 
 @return ApiRequestSimilarityReportRequest
*/
func (a *SimilarityApiService) RequestSimilarityReport(ctx context.Context, id string) ApiRequestSimilarityReportRequest {
	return ApiRequestSimilarityReportRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessMessage
func (a *SimilarityApiService) RequestSimilarityReportExecute(r ApiRequestSimilarityReportRequest) (*SuccessMessage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SimilarityApiService.RequestSimilarityReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions/{id}/similarity"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}
	if r.data == nil {
		return localVarReturnValue, nil, reportError("data is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	// body params
	localVarPostBody = r.data
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRequestSimilarityReportPdfRequest struct {
	ctx context.Context
	ApiService *SimilarityApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	id string
}

// a human readable string representing the type of integration being used
func (r ApiRequestSimilarityReportPdfRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiRequestSimilarityReportPdfRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiRequestSimilarityReportPdfRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiRequestSimilarityReportPdfRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiRequestSimilarityReportPdfRequest) Execute() (*RequestPdfResponse, *http.Response, error) {
	return r.ApiService.RequestSimilarityReportPdfExecute(r)
}

/*
RequestSimilarityReportPdf Request Pdf download and returns the Pdf Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Submission ID (returned upon a successful POST to /submissions) 
 @return ApiRequestSimilarityReportPdfRequest
*/
func (a *SimilarityApiService) RequestSimilarityReportPdf(ctx context.Context, id string) ApiRequestSimilarityReportPdfRequest {
	return ApiRequestSimilarityReportPdfRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RequestPdfResponse
func (a *SimilarityApiService) RequestSimilarityReportPdfExecute(r ApiRequestSimilarityReportPdfRequest) (*RequestPdfResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RequestPdfResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SimilarityApiService.RequestSimilarityReportPdf")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions/{id}/similarity/pdf"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
