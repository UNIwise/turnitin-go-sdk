/*
Turnitin Core API

Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

API version: 1.0.249
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SubmissionBase A Submission is the base object on which other services (such as similarity) are offered. In order to use other services a Submission must first be created and successfully process, then other service objects can be created. 
type SubmissionBase struct {
	// Submission id, optional field
	Id interface{} `json:"id,omitempty"`
	// ID of the owning user
	Owner *string `json:"owner,omitempty"`
	// Default viewer permission set, accepts INSTRUCTOR, LEARNER, EDITOR, USER, APPLICANT, ADMINISTRATOR, UNDEFINED
	OwnerDefaultPermissionSet *string `json:"owner_default_permission_set,omitempty"`
	// the title of the submission
	Title *string `json:"title,omitempty"`
	// (optional) ID of the submitting user, if different from the owning user
	Submitter *string `json:"submitter,omitempty"`
	// Default submitter permission set, accepts INSTRUCTOR, LEARNER, EDITOR, USER, APPLICANT, ADMINISTRATOR, UNDEFINED
	SubmitterDefaultPermissionSet *string `json:"submitter_default_permission_set,omitempty"`
	Eula *Eula `json:"eula,omitempty"`
	Metadata *SubmissionBaseMetadata `json:"metadata,omitempty"`
	// (optional) indicates if the submission should be treated as a text only submission. A text only submission cannot generate full reports or be viewed in the viewer, but can use the index only endpoint to be indexed
	ExtractTextOnly *bool `json:"extract_text_only,omitempty"`
}

// NewSubmissionBase instantiates a new SubmissionBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmissionBase() *SubmissionBase {
	this := SubmissionBase{}
	return &this
}

// NewSubmissionBaseWithDefaults instantiates a new SubmissionBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmissionBaseWithDefaults() *SubmissionBase {
	this := SubmissionBase{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubmissionBase) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmissionBase) GetIdOk() (*interface{}, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return &o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubmissionBase) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given interface{} and assigns it to the Id field.
func (o *SubmissionBase) SetId(v interface{}) {
	o.Id = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *SubmissionBase) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBase) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *SubmissionBase) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *SubmissionBase) SetOwner(v string) {
	o.Owner = &v
}

// GetOwnerDefaultPermissionSet returns the OwnerDefaultPermissionSet field value if set, zero value otherwise.
func (o *SubmissionBase) GetOwnerDefaultPermissionSet() string {
	if o == nil || o.OwnerDefaultPermissionSet == nil {
		var ret string
		return ret
	}
	return *o.OwnerDefaultPermissionSet
}

// GetOwnerDefaultPermissionSetOk returns a tuple with the OwnerDefaultPermissionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBase) GetOwnerDefaultPermissionSetOk() (*string, bool) {
	if o == nil || o.OwnerDefaultPermissionSet == nil {
		return nil, false
	}
	return o.OwnerDefaultPermissionSet, true
}

// HasOwnerDefaultPermissionSet returns a boolean if a field has been set.
func (o *SubmissionBase) HasOwnerDefaultPermissionSet() bool {
	if o != nil && o.OwnerDefaultPermissionSet != nil {
		return true
	}

	return false
}

// SetOwnerDefaultPermissionSet gets a reference to the given string and assigns it to the OwnerDefaultPermissionSet field.
func (o *SubmissionBase) SetOwnerDefaultPermissionSet(v string) {
	o.OwnerDefaultPermissionSet = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SubmissionBase) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBase) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SubmissionBase) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SubmissionBase) SetTitle(v string) {
	o.Title = &v
}

// GetSubmitter returns the Submitter field value if set, zero value otherwise.
func (o *SubmissionBase) GetSubmitter() string {
	if o == nil || o.Submitter == nil {
		var ret string
		return ret
	}
	return *o.Submitter
}

// GetSubmitterOk returns a tuple with the Submitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBase) GetSubmitterOk() (*string, bool) {
	if o == nil || o.Submitter == nil {
		return nil, false
	}
	return o.Submitter, true
}

// HasSubmitter returns a boolean if a field has been set.
func (o *SubmissionBase) HasSubmitter() bool {
	if o != nil && o.Submitter != nil {
		return true
	}

	return false
}

// SetSubmitter gets a reference to the given string and assigns it to the Submitter field.
func (o *SubmissionBase) SetSubmitter(v string) {
	o.Submitter = &v
}

// GetSubmitterDefaultPermissionSet returns the SubmitterDefaultPermissionSet field value if set, zero value otherwise.
func (o *SubmissionBase) GetSubmitterDefaultPermissionSet() string {
	if o == nil || o.SubmitterDefaultPermissionSet == nil {
		var ret string
		return ret
	}
	return *o.SubmitterDefaultPermissionSet
}

// GetSubmitterDefaultPermissionSetOk returns a tuple with the SubmitterDefaultPermissionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBase) GetSubmitterDefaultPermissionSetOk() (*string, bool) {
	if o == nil || o.SubmitterDefaultPermissionSet == nil {
		return nil, false
	}
	return o.SubmitterDefaultPermissionSet, true
}

// HasSubmitterDefaultPermissionSet returns a boolean if a field has been set.
func (o *SubmissionBase) HasSubmitterDefaultPermissionSet() bool {
	if o != nil && o.SubmitterDefaultPermissionSet != nil {
		return true
	}

	return false
}

// SetSubmitterDefaultPermissionSet gets a reference to the given string and assigns it to the SubmitterDefaultPermissionSet field.
func (o *SubmissionBase) SetSubmitterDefaultPermissionSet(v string) {
	o.SubmitterDefaultPermissionSet = &v
}

// GetEula returns the Eula field value if set, zero value otherwise.
func (o *SubmissionBase) GetEula() Eula {
	if o == nil || o.Eula == nil {
		var ret Eula
		return ret
	}
	return *o.Eula
}

// GetEulaOk returns a tuple with the Eula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBase) GetEulaOk() (*Eula, bool) {
	if o == nil || o.Eula == nil {
		return nil, false
	}
	return o.Eula, true
}

// HasEula returns a boolean if a field has been set.
func (o *SubmissionBase) HasEula() bool {
	if o != nil && o.Eula != nil {
		return true
	}

	return false
}

// SetEula gets a reference to the given Eula and assigns it to the Eula field.
func (o *SubmissionBase) SetEula(v Eula) {
	o.Eula = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SubmissionBase) GetMetadata() SubmissionBaseMetadata {
	if o == nil || o.Metadata == nil {
		var ret SubmissionBaseMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBase) GetMetadataOk() (*SubmissionBaseMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SubmissionBase) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given SubmissionBaseMetadata and assigns it to the Metadata field.
func (o *SubmissionBase) SetMetadata(v SubmissionBaseMetadata) {
	o.Metadata = &v
}

// GetExtractTextOnly returns the ExtractTextOnly field value if set, zero value otherwise.
func (o *SubmissionBase) GetExtractTextOnly() bool {
	if o == nil || o.ExtractTextOnly == nil {
		var ret bool
		return ret
	}
	return *o.ExtractTextOnly
}

// GetExtractTextOnlyOk returns a tuple with the ExtractTextOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBase) GetExtractTextOnlyOk() (*bool, bool) {
	if o == nil || o.ExtractTextOnly == nil {
		return nil, false
	}
	return o.ExtractTextOnly, true
}

// HasExtractTextOnly returns a boolean if a field has been set.
func (o *SubmissionBase) HasExtractTextOnly() bool {
	if o != nil && o.ExtractTextOnly != nil {
		return true
	}

	return false
}

// SetExtractTextOnly gets a reference to the given bool and assigns it to the ExtractTextOnly field.
func (o *SubmissionBase) SetExtractTextOnly(v bool) {
	o.ExtractTextOnly = &v
}

func (o SubmissionBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.OwnerDefaultPermissionSet != nil {
		toSerialize["owner_default_permission_set"] = o.OwnerDefaultPermissionSet
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Submitter != nil {
		toSerialize["submitter"] = o.Submitter
	}
	if o.SubmitterDefaultPermissionSet != nil {
		toSerialize["submitter_default_permission_set"] = o.SubmitterDefaultPermissionSet
	}
	if o.Eula != nil {
		toSerialize["eula"] = o.Eula
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.ExtractTextOnly != nil {
		toSerialize["extract_text_only"] = o.ExtractTextOnly
	}
	return json.Marshal(toSerialize)
}

type NullableSubmissionBase struct {
	value *SubmissionBase
	isSet bool
}

func (v NullableSubmissionBase) Get() *SubmissionBase {
	return v.value
}

func (v *NullableSubmissionBase) Set(val *SubmissionBase) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmissionBase) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmissionBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmissionBase(val *SubmissionBase) *NullableSubmissionBase {
	return &NullableSubmissionBase{value: val, isSet: true}
}

func (v NullableSubmissionBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmissionBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


