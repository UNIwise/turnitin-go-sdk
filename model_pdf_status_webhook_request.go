/*
Turnitin Core API

Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

API version: 1.0.249
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PDFStatusWebhookRequest struct for PDFStatusWebhookRequest
type PDFStatusWebhookRequest struct {
	// The requesting Pdf status
	Status *string `json:"status,omitempty"`
	// the PDF ID
	Id *string `json:"id,omitempty"`
	// the associated submission ID
	SubmissionId *string `json:"submission_id,omitempty"`
	Metadata *SubmissionCompleteWebhookRequestAllOfMetadata `json:"metadata,omitempty"`
}

// NewPDFStatusWebhookRequest instantiates a new PDFStatusWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPDFStatusWebhookRequest() *PDFStatusWebhookRequest {
	this := PDFStatusWebhookRequest{}
	return &this
}

// NewPDFStatusWebhookRequestWithDefaults instantiates a new PDFStatusWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPDFStatusWebhookRequestWithDefaults() *PDFStatusWebhookRequest {
	this := PDFStatusWebhookRequest{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PDFStatusWebhookRequest) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PDFStatusWebhookRequest) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PDFStatusWebhookRequest) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PDFStatusWebhookRequest) SetStatus(v string) {
	o.Status = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PDFStatusWebhookRequest) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PDFStatusWebhookRequest) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PDFStatusWebhookRequest) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PDFStatusWebhookRequest) SetId(v string) {
	o.Id = &v
}

// GetSubmissionId returns the SubmissionId field value if set, zero value otherwise.
func (o *PDFStatusWebhookRequest) GetSubmissionId() string {
	if o == nil || o.SubmissionId == nil {
		var ret string
		return ret
	}
	return *o.SubmissionId
}

// GetSubmissionIdOk returns a tuple with the SubmissionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PDFStatusWebhookRequest) GetSubmissionIdOk() (*string, bool) {
	if o == nil || o.SubmissionId == nil {
		return nil, false
	}
	return o.SubmissionId, true
}

// HasSubmissionId returns a boolean if a field has been set.
func (o *PDFStatusWebhookRequest) HasSubmissionId() bool {
	if o != nil && o.SubmissionId != nil {
		return true
	}

	return false
}

// SetSubmissionId gets a reference to the given string and assigns it to the SubmissionId field.
func (o *PDFStatusWebhookRequest) SetSubmissionId(v string) {
	o.SubmissionId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PDFStatusWebhookRequest) GetMetadata() SubmissionCompleteWebhookRequestAllOfMetadata {
	if o == nil || o.Metadata == nil {
		var ret SubmissionCompleteWebhookRequestAllOfMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PDFStatusWebhookRequest) GetMetadataOk() (*SubmissionCompleteWebhookRequestAllOfMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PDFStatusWebhookRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given SubmissionCompleteWebhookRequestAllOfMetadata and assigns it to the Metadata field.
func (o *PDFStatusWebhookRequest) SetMetadata(v SubmissionCompleteWebhookRequestAllOfMetadata) {
	o.Metadata = &v
}

func (o PDFStatusWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.SubmissionId != nil {
		toSerialize["submission_id"] = o.SubmissionId
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullablePDFStatusWebhookRequest struct {
	value *PDFStatusWebhookRequest
	isSet bool
}

func (v NullablePDFStatusWebhookRequest) Get() *PDFStatusWebhookRequest {
	return v.value
}

func (v *NullablePDFStatusWebhookRequest) Set(val *PDFStatusWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePDFStatusWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePDFStatusWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePDFStatusWebhookRequest(val *PDFStatusWebhookRequest) *NullablePDFStatusWebhookRequest {
	return &NullablePDFStatusWebhookRequest{value: val, isSet: true}
}

func (v NullablePDFStatusWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePDFStatusWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


