/*
Turnitin Core API

Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

API version: 1.0.249
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// SubmissionBaseMetadata (optional) Submission metadata. If a group context is included, it must be associated to a group
type SubmissionBaseMetadata struct {
	Submitter *Users `json:"submitter,omitempty"`
	Owners []Users `json:"owners,omitempty"`
	Group *Group `json:"group,omitempty"`
	GroupContext *GroupContext `json:"group_context,omitempty"`
	// Optional original submision date
	OriginalSubmittedTime *time.Time `json:"original_submitted_time,omitempty"`
	// custom metadata
	Custom *string `json:"custom,omitempty"`
}

// NewSubmissionBaseMetadata instantiates a new SubmissionBaseMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmissionBaseMetadata() *SubmissionBaseMetadata {
	this := SubmissionBaseMetadata{}
	return &this
}

// NewSubmissionBaseMetadataWithDefaults instantiates a new SubmissionBaseMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmissionBaseMetadataWithDefaults() *SubmissionBaseMetadata {
	this := SubmissionBaseMetadata{}
	return &this
}

// GetSubmitter returns the Submitter field value if set, zero value otherwise.
func (o *SubmissionBaseMetadata) GetSubmitter() Users {
	if o == nil || o.Submitter == nil {
		var ret Users
		return ret
	}
	return *o.Submitter
}

// GetSubmitterOk returns a tuple with the Submitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBaseMetadata) GetSubmitterOk() (*Users, bool) {
	if o == nil || o.Submitter == nil {
		return nil, false
	}
	return o.Submitter, true
}

// HasSubmitter returns a boolean if a field has been set.
func (o *SubmissionBaseMetadata) HasSubmitter() bool {
	if o != nil && o.Submitter != nil {
		return true
	}

	return false
}

// SetSubmitter gets a reference to the given Users and assigns it to the Submitter field.
func (o *SubmissionBaseMetadata) SetSubmitter(v Users) {
	o.Submitter = &v
}

// GetOwners returns the Owners field value if set, zero value otherwise.
func (o *SubmissionBaseMetadata) GetOwners() []Users {
	if o == nil || o.Owners == nil {
		var ret []Users
		return ret
	}
	return o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBaseMetadata) GetOwnersOk() ([]Users, bool) {
	if o == nil || o.Owners == nil {
		return nil, false
	}
	return o.Owners, true
}

// HasOwners returns a boolean if a field has been set.
func (o *SubmissionBaseMetadata) HasOwners() bool {
	if o != nil && o.Owners != nil {
		return true
	}

	return false
}

// SetOwners gets a reference to the given []Users and assigns it to the Owners field.
func (o *SubmissionBaseMetadata) SetOwners(v []Users) {
	o.Owners = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *SubmissionBaseMetadata) GetGroup() Group {
	if o == nil || o.Group == nil {
		var ret Group
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBaseMetadata) GetGroupOk() (*Group, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *SubmissionBaseMetadata) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given Group and assigns it to the Group field.
func (o *SubmissionBaseMetadata) SetGroup(v Group) {
	o.Group = &v
}

// GetGroupContext returns the GroupContext field value if set, zero value otherwise.
func (o *SubmissionBaseMetadata) GetGroupContext() GroupContext {
	if o == nil || o.GroupContext == nil {
		var ret GroupContext
		return ret
	}
	return *o.GroupContext
}

// GetGroupContextOk returns a tuple with the GroupContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBaseMetadata) GetGroupContextOk() (*GroupContext, bool) {
	if o == nil || o.GroupContext == nil {
		return nil, false
	}
	return o.GroupContext, true
}

// HasGroupContext returns a boolean if a field has been set.
func (o *SubmissionBaseMetadata) HasGroupContext() bool {
	if o != nil && o.GroupContext != nil {
		return true
	}

	return false
}

// SetGroupContext gets a reference to the given GroupContext and assigns it to the GroupContext field.
func (o *SubmissionBaseMetadata) SetGroupContext(v GroupContext) {
	o.GroupContext = &v
}

// GetOriginalSubmittedTime returns the OriginalSubmittedTime field value if set, zero value otherwise.
func (o *SubmissionBaseMetadata) GetOriginalSubmittedTime() time.Time {
	if o == nil || o.OriginalSubmittedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.OriginalSubmittedTime
}

// GetOriginalSubmittedTimeOk returns a tuple with the OriginalSubmittedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBaseMetadata) GetOriginalSubmittedTimeOk() (*time.Time, bool) {
	if o == nil || o.OriginalSubmittedTime == nil {
		return nil, false
	}
	return o.OriginalSubmittedTime, true
}

// HasOriginalSubmittedTime returns a boolean if a field has been set.
func (o *SubmissionBaseMetadata) HasOriginalSubmittedTime() bool {
	if o != nil && o.OriginalSubmittedTime != nil {
		return true
	}

	return false
}

// SetOriginalSubmittedTime gets a reference to the given time.Time and assigns it to the OriginalSubmittedTime field.
func (o *SubmissionBaseMetadata) SetOriginalSubmittedTime(v time.Time) {
	o.OriginalSubmittedTime = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *SubmissionBaseMetadata) GetCustom() string {
	if o == nil || o.Custom == nil {
		var ret string
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmissionBaseMetadata) GetCustomOk() (*string, bool) {
	if o == nil || o.Custom == nil {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *SubmissionBaseMetadata) HasCustom() bool {
	if o != nil && o.Custom != nil {
		return true
	}

	return false
}

// SetCustom gets a reference to the given string and assigns it to the Custom field.
func (o *SubmissionBaseMetadata) SetCustom(v string) {
	o.Custom = &v
}

func (o SubmissionBaseMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Submitter != nil {
		toSerialize["submitter"] = o.Submitter
	}
	if o.Owners != nil {
		toSerialize["owners"] = o.Owners
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.GroupContext != nil {
		toSerialize["group_context"] = o.GroupContext
	}
	if o.OriginalSubmittedTime != nil {
		toSerialize["original_submitted_time"] = o.OriginalSubmittedTime
	}
	if o.Custom != nil {
		toSerialize["custom"] = o.Custom
	}
	return json.Marshal(toSerialize)
}

type NullableSubmissionBaseMetadata struct {
	value *SubmissionBaseMetadata
	isSet bool
}

func (v NullableSubmissionBaseMetadata) Get() *SubmissionBaseMetadata {
	return v.value
}

func (v *NullableSubmissionBaseMetadata) Set(val *SubmissionBaseMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmissionBaseMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmissionBaseMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmissionBaseMetadata(val *SubmissionBaseMetadata) *NullableSubmissionBaseMetadata {
	return &NullableSubmissionBaseMetadata{value: val, isSet: true}
}

func (v NullableSubmissionBaseMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmissionBaseMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


