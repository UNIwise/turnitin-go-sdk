/*
Turnitin Core API

Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

API version: 1.0.249
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SubmissionApiService SubmissionApi service
type SubmissionApiService service

type ApiCreateSubmissionRequest struct {
	ctx context.Context
	ApiService *SubmissionApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	data *SubmissionBase
}

// a human readable string representing the type of integration being used
func (r ApiCreateSubmissionRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiCreateSubmissionRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiCreateSubmissionRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiCreateSubmissionRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiCreateSubmissionRequest) Data(data SubmissionBase) ApiCreateSubmissionRequest {
	r.data = &data
	return r
}

func (r ApiCreateSubmissionRequest) Execute() (*SimpleSubmissionResponse, *http.Response, error) {
	return r.ApiService.CreateSubmissionExecute(r)
}

/*
CreateSubmission Create a new Submission

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSubmissionRequest
*/
func (a *SubmissionApiService) CreateSubmission(ctx context.Context) ApiCreateSubmissionRequest {
	return ApiCreateSubmissionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SimpleSubmissionResponse
func (a *SubmissionApiService) CreateSubmissionExecute(r ApiCreateSubmissionRequest) (*SimpleSubmissionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SimpleSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubmissionApiService.CreateSubmission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}
	if r.data == nil {
		return localVarReturnValue, nil, reportError("data is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	// body params
	localVarPostBody = r.data
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSubmissionRequest struct {
	ctx context.Context
	ApiService *SubmissionApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	id string
	hard *string
}

// a human readable string representing the type of integration being used
func (r ApiDeleteSubmissionRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiDeleteSubmissionRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiDeleteSubmissionRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiDeleteSubmissionRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

// Accepts true or false indicating either hard or soft delete. A soft delete removes the associated submission report/index and changes the saved submission state to DELETED. A hard deletion completely removes the submission information from Panda and TCA and removes the associated report/index, which can not be recovered. 
func (r ApiDeleteSubmissionRequest) Hard(hard string) ApiDeleteSubmissionRequest {
	r.hard = &hard
	return r
}

func (r ApiDeleteSubmissionRequest) Execute() (*SuccessMessage, *http.Response, error) {
	return r.ApiService.DeleteSubmissionExecute(r)
}

/*
DeleteSubmission Deletes a submission and associated similarity report.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Submission ID (returned upon a successful POST to /submissions) 
 @return ApiDeleteSubmissionRequest
*/
func (a *SubmissionApiService) DeleteSubmission(ctx context.Context, id string) ApiDeleteSubmissionRequest {
	return ApiDeleteSubmissionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessMessage
func (a *SubmissionApiService) DeleteSubmissionExecute(r ApiDeleteSubmissionRequest) (*SuccessMessage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubmissionApiService.DeleteSubmission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	if r.hard != nil {
		localVarQueryParams.Add("hard", parameterToString(*r.hard, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubmiddionDetailsRequest struct {
	ctx context.Context
	ApiService *SubmissionApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	id string
}

// a human readable string representing the type of integration being used
func (r ApiGetSubmiddionDetailsRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiGetSubmiddionDetailsRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiGetSubmiddionDetailsRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiGetSubmiddionDetailsRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiGetSubmiddionDetailsRequest) Execute() (*Submission, *http.Response, error) {
	return r.ApiService.GetSubmiddionDetailsExecute(r)
}

/*
GetSubmiddionDetails Get Submission Details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Submission ID (returned upon a successful POST to /submissions) 
 @return ApiGetSubmiddionDetailsRequest
*/
func (a *SubmissionApiService) GetSubmiddionDetails(ctx context.Context, id string) ApiGetSubmiddionDetailsRequest {
	return ApiGetSubmiddionDetailsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Submission
func (a *SubmissionApiService) GetSubmiddionDetailsExecute(r ApiGetSubmiddionDetailsRequest) (*Submission, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Submission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubmissionApiService.GetSubmiddionDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecoverSubmissionRequest struct {
	ctx context.Context
	ApiService *SubmissionApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	id string
}

// a human readable string representing the type of integration being used
func (r ApiRecoverSubmissionRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiRecoverSubmissionRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiRecoverSubmissionRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiRecoverSubmissionRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

func (r ApiRecoverSubmissionRequest) Execute() (*SimpleSubmissionResponse, *http.Response, error) {
	return r.ApiService.RecoverSubmissionExecute(r)
}

/*
RecoverSubmission Recover a soft deleted submission

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Submission ID (returned upon a successful POST to /submissions) 
 @return ApiRecoverSubmissionRequest
*/
func (a *SubmissionApiService) RecoverSubmission(ctx context.Context, id string) ApiRecoverSubmissionRequest {
	return ApiRecoverSubmissionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SimpleSubmissionResponse
func (a *SubmissionApiService) RecoverSubmissionExecute(r ApiRecoverSubmissionRequest) (*SimpleSubmissionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SimpleSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubmissionApiService.RecoverSubmission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions/{id}/recover"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadSubmittedFileRequest struct {
	ctx context.Context
	ApiService *SubmissionApiService
	xTurnitinIntegrationName *string
	xTurnitinIntegrationVersion *string
	id string
	contentType *string
	contentDisposition *string
	file *map[string]interface{}
}

// a human readable string representing the type of integration being used
func (r ApiUploadSubmittedFileRequest) XTurnitinIntegrationName(xTurnitinIntegrationName string) ApiUploadSubmittedFileRequest {
	r.xTurnitinIntegrationName = &xTurnitinIntegrationName
	return r
}

// the version of the integration platform being used
func (r ApiUploadSubmittedFileRequest) XTurnitinIntegrationVersion(xTurnitinIntegrationVersion string) ApiUploadSubmittedFileRequest {
	r.xTurnitinIntegrationVersion = &xTurnitinIntegrationVersion
	return r
}

// *Must be &#39;binary/octet-stream&#39; 
func (r ApiUploadSubmittedFileRequest) ContentType(contentType string) ApiUploadSubmittedFileRequest {
	r.contentType = &contentType
	return r
}

// *must include the \&quot;filename\&quot; parameter, e.g. &#x60;inline; filename&#x3D;\&quot;MyFile.docx\&quot;&#x60;. To support UTF-8 filenames, you must URL encode the header 
func (r ApiUploadSubmittedFileRequest) ContentDisposition(contentDisposition string) ApiUploadSubmittedFileRequest {
	r.contentDisposition = &contentDisposition
	return r
}

// the user&#39;s submitted file
func (r ApiUploadSubmittedFileRequest) File(file map[string]interface{}) ApiUploadSubmittedFileRequest {
	r.file = &file
	return r
}

func (r ApiUploadSubmittedFileRequest) Execute() (*SuccessMessage, *http.Response, error) {
	return r.ApiService.UploadSubmittedFileExecute(r)
}

/*
UploadSubmittedFile Upload Submitted File

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Submission ID (returned upon a successful POST to /submissions) 
 @return ApiUploadSubmittedFileRequest
*/
func (a *SubmissionApiService) UploadSubmittedFile(ctx context.Context, id string) ApiUploadSubmittedFileRequest {
	return ApiUploadSubmittedFileRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessMessage
func (a *SubmissionApiService) UploadSubmittedFileExecute(r ApiUploadSubmittedFileRequest) (*SuccessMessage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubmissionApiService.UploadSubmittedFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/submissions/{id}/original"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTurnitinIntegrationName == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationName is required and must be specified")
	}
	if r.xTurnitinIntegrationVersion == nil {
		return localVarReturnValue, nil, reportError("xTurnitinIntegrationVersion is required and must be specified")
	}
	if r.contentType == nil {
		return localVarReturnValue, nil, reportError("contentType is required and must be specified")
	}
	if r.contentDisposition == nil {
		return localVarReturnValue, nil, reportError("contentDisposition is required and must be specified")
	}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"binary/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Turnitin-Integration-Name"] = parameterToString(*r.xTurnitinIntegrationName, "")
	localVarHeaderParams["X-Turnitin-Integration-Version"] = parameterToString(*r.xTurnitinIntegrationVersion, "")
	localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	localVarHeaderParams["Content-Disposition"] = parameterToString(*r.contentDisposition, "")
	// body params
	localVarPostBody = r.file
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v SubmissionSizeError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RateLimitError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
