/*
Turnitin Core API

Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

API version: 1.0.249
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AggregateGroup struct for AggregateGroup
type AggregateGroup struct {
	// (required) 
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	GroupContext *GroupContext `json:"group_context,omitempty"`
	// due date for the group
	DueDate *string `json:"due_date,omitempty"`
	ReportGeneration *string `json:"report_generation,omitempty"`
}

// NewAggregateGroup instantiates a new AggregateGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregateGroup() *AggregateGroup {
	this := AggregateGroup{}
	return &this
}

// NewAggregateGroupWithDefaults instantiates a new AggregateGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregateGroupWithDefaults() *AggregateGroup {
	this := AggregateGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AggregateGroup) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateGroup) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AggregateGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AggregateGroup) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AggregateGroup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateGroup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AggregateGroup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AggregateGroup) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AggregateGroup) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateGroup) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AggregateGroup) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AggregateGroup) SetType(v string) {
	o.Type = &v
}

// GetGroupContext returns the GroupContext field value if set, zero value otherwise.
func (o *AggregateGroup) GetGroupContext() GroupContext {
	if o == nil || o.GroupContext == nil {
		var ret GroupContext
		return ret
	}
	return *o.GroupContext
}

// GetGroupContextOk returns a tuple with the GroupContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateGroup) GetGroupContextOk() (*GroupContext, bool) {
	if o == nil || o.GroupContext == nil {
		return nil, false
	}
	return o.GroupContext, true
}

// HasGroupContext returns a boolean if a field has been set.
func (o *AggregateGroup) HasGroupContext() bool {
	if o != nil && o.GroupContext != nil {
		return true
	}

	return false
}

// SetGroupContext gets a reference to the given GroupContext and assigns it to the GroupContext field.
func (o *AggregateGroup) SetGroupContext(v GroupContext) {
	o.GroupContext = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *AggregateGroup) GetDueDate() string {
	if o == nil || o.DueDate == nil {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateGroup) GetDueDateOk() (*string, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *AggregateGroup) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *AggregateGroup) SetDueDate(v string) {
	o.DueDate = &v
}

// GetReportGeneration returns the ReportGeneration field value if set, zero value otherwise.
func (o *AggregateGroup) GetReportGeneration() string {
	if o == nil || o.ReportGeneration == nil {
		var ret string
		return ret
	}
	return *o.ReportGeneration
}

// GetReportGenerationOk returns a tuple with the ReportGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateGroup) GetReportGenerationOk() (*string, bool) {
	if o == nil || o.ReportGeneration == nil {
		return nil, false
	}
	return o.ReportGeneration, true
}

// HasReportGeneration returns a boolean if a field has been set.
func (o *AggregateGroup) HasReportGeneration() bool {
	if o != nil && o.ReportGeneration != nil {
		return true
	}

	return false
}

// SetReportGeneration gets a reference to the given string and assigns it to the ReportGeneration field.
func (o *AggregateGroup) SetReportGeneration(v string) {
	o.ReportGeneration = &v
}

func (o AggregateGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.GroupContext != nil {
		toSerialize["group_context"] = o.GroupContext
	}
	if o.DueDate != nil {
		toSerialize["due_date"] = o.DueDate
	}
	if o.ReportGeneration != nil {
		toSerialize["report_generation"] = o.ReportGeneration
	}
	return json.Marshal(toSerialize)
}

type NullableAggregateGroup struct {
	value *AggregateGroup
	isSet bool
}

func (v NullableAggregateGroup) Get() *AggregateGroup {
	return v.value
}

func (v *NullableAggregateGroup) Set(val *AggregateGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateGroup(val *AggregateGroup) *NullableAggregateGroup {
	return &NullableAggregateGroup{value: val, isSet: true}
}

func (v NullableAggregateGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


