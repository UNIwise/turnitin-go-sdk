/*
Turnitin Core API

Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

API version: 1.0.249
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// WebhookAllOf struct for WebhookAllOf
type WebhookAllOf struct {
	// unique id of webhook
	Id string `json:"id"`
	// RFC3339  timestamp of when this Webhook was initially created. This is the time at which the POST to /webhooks was made. 
	CreatedTime *time.Time `json:"created_time,omitempty"`
}

// NewWebhookAllOf instantiates a new WebhookAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookAllOf(id string) *WebhookAllOf {
	this := WebhookAllOf{}
	this.Id = id
	return &this
}

// NewWebhookAllOfWithDefaults instantiates a new WebhookAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookAllOfWithDefaults() *WebhookAllOf {
	this := WebhookAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *WebhookAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WebhookAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WebhookAllOf) SetId(v string) {
	o.Id = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *WebhookAllOf) GetCreatedTime() time.Time {
	if o == nil || o.CreatedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAllOf) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || o.CreatedTime == nil {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *WebhookAllOf) HasCreatedTime() bool {
	if o != nil && o.CreatedTime != nil {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *WebhookAllOf) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

func (o WebhookAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.CreatedTime != nil {
		toSerialize["created_time"] = o.CreatedTime
	}
	return json.Marshal(toSerialize)
}

type NullableWebhookAllOf struct {
	value *WebhookAllOf
	isSet bool
}

func (v NullableWebhookAllOf) Get() *WebhookAllOf {
	return v.value
}

func (v *NullableWebhookAllOf) Set(val *WebhookAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookAllOf(val *WebhookAllOf) *NullableWebhookAllOf {
	return &NullableWebhookAllOf{value: val, isSet: true}
}

func (v NullableWebhookAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


