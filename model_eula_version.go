/*
Turnitin Core API

Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

API version: 1.0.249
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// EulaVersion struct for EulaVersion
type EulaVersion struct {
	// The unique name of the EULA Version 
	Version *string `json:"version,omitempty"`
	// The starting date indicating when acceptence of this EULA is considered valid 
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	// The ending date indicating when acceptence of this EULA is no longer valid 
	ValidUntil NullableTime `json:"valid_until,omitempty"`
	// The url where the corresponding EULA page can be found 
	Url *string `json:"url,omitempty"`
	// The languages (instances) of this version. 21 language locales are currently supported. 
	AvailableLanguages []string `json:"available_languages,omitempty"`
}

// NewEulaVersion instantiates a new EulaVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEulaVersion() *EulaVersion {
	this := EulaVersion{}
	return &this
}

// NewEulaVersionWithDefaults instantiates a new EulaVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEulaVersionWithDefaults() *EulaVersion {
	this := EulaVersion{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *EulaVersion) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EulaVersion) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *EulaVersion) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *EulaVersion) SetVersion(v string) {
	o.Version = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *EulaVersion) GetValidFrom() time.Time {
	if o == nil || o.ValidFrom == nil {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EulaVersion) GetValidFromOk() (*time.Time, bool) {
	if o == nil || o.ValidFrom == nil {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *EulaVersion) HasValidFrom() bool {
	if o != nil && o.ValidFrom != nil {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *EulaVersion) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetValidUntil returns the ValidUntil field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EulaVersion) GetValidUntil() time.Time {
	if o == nil || o.ValidUntil.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ValidUntil.Get()
}

// GetValidUntilOk returns a tuple with the ValidUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EulaVersion) GetValidUntilOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidUntil.Get(), o.ValidUntil.IsSet()
}

// HasValidUntil returns a boolean if a field has been set.
func (o *EulaVersion) HasValidUntil() bool {
	if o != nil && o.ValidUntil.IsSet() {
		return true
	}

	return false
}

// SetValidUntil gets a reference to the given NullableTime and assigns it to the ValidUntil field.
func (o *EulaVersion) SetValidUntil(v time.Time) {
	o.ValidUntil.Set(&v)
}
// SetValidUntilNil sets the value for ValidUntil to be an explicit nil
func (o *EulaVersion) SetValidUntilNil() {
	o.ValidUntil.Set(nil)
}

// UnsetValidUntil ensures that no value is present for ValidUntil, not even an explicit nil
func (o *EulaVersion) UnsetValidUntil() {
	o.ValidUntil.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *EulaVersion) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EulaVersion) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *EulaVersion) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *EulaVersion) SetUrl(v string) {
	o.Url = &v
}

// GetAvailableLanguages returns the AvailableLanguages field value if set, zero value otherwise.
func (o *EulaVersion) GetAvailableLanguages() []string {
	if o == nil || o.AvailableLanguages == nil {
		var ret []string
		return ret
	}
	return o.AvailableLanguages
}

// GetAvailableLanguagesOk returns a tuple with the AvailableLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EulaVersion) GetAvailableLanguagesOk() ([]string, bool) {
	if o == nil || o.AvailableLanguages == nil {
		return nil, false
	}
	return o.AvailableLanguages, true
}

// HasAvailableLanguages returns a boolean if a field has been set.
func (o *EulaVersion) HasAvailableLanguages() bool {
	if o != nil && o.AvailableLanguages != nil {
		return true
	}

	return false
}

// SetAvailableLanguages gets a reference to the given []string and assigns it to the AvailableLanguages field.
func (o *EulaVersion) SetAvailableLanguages(v []string) {
	o.AvailableLanguages = v
}

func (o EulaVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.ValidFrom != nil {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if o.ValidUntil.IsSet() {
		toSerialize["valid_until"] = o.ValidUntil.Get()
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.AvailableLanguages != nil {
		toSerialize["available_languages"] = o.AvailableLanguages
	}
	return json.Marshal(toSerialize)
}

type NullableEulaVersion struct {
	value *EulaVersion
	isSet bool
}

func (v NullableEulaVersion) Get() *EulaVersion {
	return v.value
}

func (v *NullableEulaVersion) Set(val *EulaVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableEulaVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableEulaVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEulaVersion(val *EulaVersion) *NullableEulaVersion {
	return &NullableEulaVersion{value: val, isSet: true}
}

func (v NullableEulaVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEulaVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


